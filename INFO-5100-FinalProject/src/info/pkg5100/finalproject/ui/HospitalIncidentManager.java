/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info.pkg5100.finalproject.ui;

import info.pkg5100.finalproject.daos.IncidenteCaseDaoImplementation;
import info.pkg5100.finalproject.daos.OrganizationDaoImplementation;
import info.pkg5100.finalproject.daos.PatientDaoImplementation;
import info.pkg5100.finalproject.daos.UserDaoImplementation;
import info.pkg5100.finalproject.models.IncidentCase;
import info.pkg5100.finalproject.models.Organization;
import info.pkg5100.finalproject.models.Patient;
import info.pkg5100.finalproject.models.User;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ankit
 */
public class HospitalIncidentManager extends javax.swing.JPanel {

    /**
     * Creates new form HospitalIncidentManager
     */
    JPanel mainWorkJPanel;
    User currentuser;
    Organization currentOrganization;

    UserDaoImplementation userDaoImplementation;
    OrganizationDaoImplementation organizationDaoImplementation;
    IncidenteCaseDaoImplementation incidenteCaseDaoImplementation;
    PatientDaoImplementation patientDaoImplementation;

    public HospitalIncidentManager() {
        initComponents();
    }

    public HospitalIncidentManager(JPanel mainWorkJPanel, User currentuser, Organization currentOrganization) throws SQLException {
        initComponents();

        this.currentOrganization = currentOrganization;
        this.currentuser = currentuser;
        this.mainWorkJPanel = mainWorkJPanel;

        this.userDaoImplementation = new UserDaoImplementation();
        this.organizationDaoImplementation = new OrganizationDaoImplementation();
        this.incidenteCaseDaoImplementation = new IncidenteCaseDaoImplementation();
        this.patientDaoImplementation = new PatientDaoImplementation();

        populateRequestsTable();
        populateAcceptedCaseTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAcceptedIncidents = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblIncidentRequest = new javax.swing.JTable();
        btnAcceptRequest = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblAcceptedIncidents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Description", "Location ", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAcceptedIncidents);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Requested Incidents");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Accepted Incidents");

        tblIncidentRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Description", "Location ", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblIncidentRequest);

        btnAcceptRequest.setBackground(new java.awt.Color(31, 75, 124));
        btnAcceptRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnAcceptRequest.setText("Accept");
        btnAcceptRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptRequestActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(31, 75, 124));
        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Hospital Incident Management");
        jLabel6.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(250, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(176, 176, 176)
                            .addComponent(btnAcceptRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(250, 250, 250))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAcceptRequest)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptRequestActionPerformed
        try {
            // TODO add your handling code here:
            int selectedRowIndex = tblIncidentRequest.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select an incident.");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tblIncidentRequest.getModel();
            IncidentCase incidentCase = (IncidentCase) model.getValueAt(selectedRowIndex, 0);

            incidentCase.setOrgId(this.currentOrganization.getId());
            incidentCase.setOrgType(this.currentOrganization.getType());
            incidentCase.setStatus("hospital-accepted");

            incidentCase.setHospitalCaseAccepted("true");
            incidentCase.setHospitalId(this.currentuser.getId());

            this.incidenteCaseDaoImplementation.update(incidentCase);
            populateAcceptedCaseTable();
            populateRequestsTable();

            for (Patient patient : this.patientDaoImplementation.getPatientsByIncidentCaseId(incidentCase.getId())) {
                patient.setHospitalId(this.currentuser.getId());
                this.patientDaoImplementation.update(patient);
            }
        } catch (SQLException ex) {
            Logger.getLogger(HospitalIncidentManager.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAcceptRequestActionPerformed

    void populateAcceptedCaseTable() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) tblAcceptedIncidents.getModel();
        model.setRowCount(0);

        for (IncidentCase incidentCase : this.incidenteCaseDaoImplementation.getIncidentCasesByOrgIdAndOrgTypeAndStatusAndLocation(this.currentOrganization.getId(),
                this.currentOrganization.getType(),
                "hospital-accepted",
                currentOrganization.getLocation())) {

            if (this.currentuser.getId() == incidentCase.getHospitalId()) {
                Object[] row = new Object[4];
                row[0] = incidentCase;
                row[1] = incidentCase.getDescription();
                row[2] = incidentCase.getLocation();
                row[3] = incidentCase.getStatus();

                model.addRow(row);
            }
        }
    }

    void populateRequestsTable() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) tblIncidentRequest.getModel();
        model.setRowCount(0);

        for (IncidentCase incidentCase : this.incidenteCaseDaoImplementation.getIncidentCasesByStatusAndLocation("hospital-requested", currentOrganization.getLocation())) {
            Object[] row = new Object[4];
            row[0] = incidentCase;
            row[1] = incidentCase.getDescription();
            row[2] = incidentCase.getLocation();
            row[3] = incidentCase.getStatus();

            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptRequest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblAcceptedIncidents;
    private javax.swing.JTable tblIncidentRequest;
    // End of variables declaration//GEN-END:variables
}
